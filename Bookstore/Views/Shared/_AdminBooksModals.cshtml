@model BooksInputModel
@{
    string? RetBookDelete = TempData["BookDelete"] as string;
    string? RetBookCreate = TempData["BookCreate"] as string;
}

@* Create New Book Modal *@

<div class="modal fade"  id="CreateBook" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Create New Book</h1
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body p-5">
                
                <form asp-action="CreateBook" enctype="multipart/form-data" asp-controller="Admin" method="post" id="CreateBookForm">

                    @* BookName *@
                    <div class="form-floating mb-3">
                      <input asp-for="BookName" type="text" class="form-control" id="floatingInput" placeholder="name@example.com">
                      <label for="floatingInput">Book Name</label>
                    </div>

                    @* Author *@
                    <div class="form-floating mb-3">
                      <input asp-for="Author" type="text" class="form-control" id="floatingPassword" placeholder="Password">
                      <label for="floatingPassword">Author</label>
                    </div>

                    @* Cover Photo *@
                    <div class="mb-3">
                      <label for="formFileMultiple" class="form-label">Upload Cover Photo</label>
                      <input asp-for="CoverPhoto" class="form-control" />
                    </div>

                    @* Category *@
                    <select class="form-select" asp-items="new SelectList(ViewBag.CategoryDropdown)" asp-for="Category">
                      <option value="" selected>Select The Category</option>
                    </select>

                </form>

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                <button type="submit" form="CreateBookForm" class="btn btn-primary">Create</button>
            </div>
        </div>
    </div>
</div>

@if (RetBookCreate == "true")
{
    <script>
         document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: 'Operation Successful',
                text: 'The Book Has Been Added!!!',
                icon: 'Success'
            });
        });
     </script>

}else if (RetBookCreate == "false")
{
    <script>
         document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: '404 ERROR',
                text: 'Something Went Wrong!',
                icon: 'error'
            });
        });
    </script>
}


@* DELETE BOOK MODAL *@

<div class="modal fade" id="DeleteBook" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Delete Book</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body p-5">
                <form asp-action="DeleteBook" asp-controller="Admin" method="post" id="DeleteBookForm">   
                    <div class="mb-3">
                        <input type="text" asp-for="BookName" autocomplete="off" class="form-control" id="searchInput" placeholder="Search...">
                    </div>
                    <div id="filteredResults"></div>
                </form>
            </div>

           <script>
                fetch('/Admin/GetBookNames')
                    .then(response => response.json())
                    .then(data => {
                        const searchInput = document.getElementById('searchInput');
                        const filteredResults = document.getElementById('filteredResults');

                        // Function to filter and display results
                        const updateResults = (searchTerm = '') => {
                            // Filter and prioritize items where the search term matches at the start
                            const filteredData = data.filter(item => item.toLowerCase().startsWith(searchTerm.toLowerCase()));

                            // Sort the filtered data alphabetically
                            filteredData.sort((a, b) => a.localeCompare(b));

                            filteredResults.innerHTML = '';

                            const maxResults = 5; // Maximum number of results to display
                            const slicedData = filteredData.slice(0, maxResults); // Slice the array to get only the first 5 items

                            slicedData.forEach(item => {
                                const listItem = document.createElement('div');
                                listItem.textContent = item;
                                listItem.classList.add('p-2', 'border-bottom', 'cursor-pointer'); 
                                listItem.addEventListener('click', () => {
                                    searchInput.value = item; // Fill search input with clicked item
                                    updateResults(item); // Update results based on clicked item
                                });
                                filteredResults.appendChild(listItem);
                            });
                        };

                        // Initial call to display all data
                        updateResults();

                        // Event listener for input changes
                        searchInput.addEventListener('input', () => {
                            updateResults(searchInput.value);
                        });
                    })
                    .catch(error => console.error('Error:', error));
            </script>



            <style>
                .cursor-pointer {
                    cursor: pointer;
                }
            </style>

            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                <button type="submit" form="DeleteBookForm" class="btn btn-primary">Delete</button>
            </div>
        </div>
    </div>
</div>

@if (RetBookDelete == "true")
{
    <script>
         document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: 'Operation Successful',
                text: 'The Book Has Been Removed',
                icon: 'Success'
            });
        });
     </script>

}else if (RetBookDelete == "false")
{
    <script>
         document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: '404 ERROR',
                text: 'The Book Was Not Found',
                icon: 'error'
            });
        });
    </script>
}



@* SHOW LIST  *@

<div class="modal fade"  id="ListBook" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog" style="max-width: 70vw;">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Books' Details</h1
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body p-5">
                <div id="booksTableContainer">
                    <table id="booksTable" class="table">
                        <thead>
                            <tr>
                                <th>Book Name</th>
                                <th>Author</th>
                                <th>Category</th>
                                <th>Status</th>
                                <th>See Image</th>
                            </tr>
                        </thead>
                        <tbody id="booksTableBody">
        
                        </tbody>
                    </table>
                </div>             
            </div>

            <script>
                // Function to fetch books from the server and populate the table
                const fetchAndPopulateBooks = () => {
                    fetch('/admin/GetBooks')
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(books => {
                            const tableBody = document.getElementById('booksTableBody');
                            tableBody.innerHTML = ''; // Clear existing table rows

                            books.forEach(book => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td>${book.BookName}</td>
                                    <td>${book.Author}</td>
                                    <td>${book.Category}</td>
                                    <td>${book.Status}</td>
                                    <td><button class="btn btn-outline-primary" onclick="openImage('${book.ImageSource}')">View Image</button></td>
                                `;
                                tableBody.appendChild(row);
                            });
                        })
                        .catch(error => {
                            
                            document.addEventListener('DOMContentLoaded', function () {
                                Swal.fire({
                                    title: '404 ERROR',
                                    text: 'Something Went Wrong!',
                                    icon: 'error'
                                });
                            });

                        });

                            
                };

                const openImage = (imageSource) => {
                     window.open(imageSource, '_blank');
                };


                // Call fetchAndPopulateBooks to populate the table initially
                fetchAndPopulateBooks();
            </script>




            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                <button type="submit" form="CreateBookForm" class="btn btn-primary">Create</button>
            </div>
        </div>
    </div>
</div>

